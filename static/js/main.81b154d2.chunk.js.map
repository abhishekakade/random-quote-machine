{"version":3,"sources":["fonts/icomoon.ttf","components/QuoteBox.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","QuoteBox","_this$props","this","props","quote","author","newQuoteBtn","react_default","a","createElement","className","id","onClick","href","data-size","data-hashtags","hashtags","data-show-count","target","rel","Component","errorQuote","errorQuoteAuthor","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","newQuote","fetch","then","response","json","data","_data$quote","body","setState","catch","err","console","log","changeColor","colors","oneRandomColor","Math","floor","random","length","document","getElementsByTagName","style","background","getElementById","color","state","display","fontFamily","margin","padding","borderRadius","textDecoration","transition","components_QuoteBox","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ReactDOM","render","src_App","URL","process","origin","addEventListener","concat","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.81b154d2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icomoon.ab3e32da.ttf\";","import React, { Component } from \"react\";\r\nimport \"tachyons\";\r\nimport \"../../src/QuoteBox.css\";\r\nimport \"../../src/fonts/icomoon.ttf\";\r\n\r\nclass QuoteBox extends Component {\r\n  render() {\r\n    const { quote, author, newQuoteBtn } = this.props;\r\n    return (\r\n      // <div className=\"flex justify-around h-auto v-mid\" id=\"background\">\r\n      // <div className=\"mw5 mw7-ns center ph5-ns ma0\" id=\"background\"> original\r\n      <div\r\n        className='mh7 mw8 mw7-ns mw6-m center ph3 ph4-ns ph4-m ma0'\r\n        id='background'\r\n      >\r\n        <div className='mt4 mb4 pa4' id='quote-box'>\r\n          <p id='text'>\r\n            {/* Removed font awesome icon and used icomoon icon to prevent unnecessary requests and 500kb downloads */}\r\n            <span className='icon-quote-left pr3 pl3' />\r\n            {quote}\r\n          </p>\r\n\r\n          <p id='author'>{\"- \" + author}</p>\r\n          <button\r\n            className='ma2 grow no-underline br-pill ph3 pv2 mb2 dib white bg-black'\r\n            id='new-quote'\r\n            onClick={newQuoteBtn}\r\n          >\r\n            New Quote\r\n          </button>\r\n          <a\r\n            href={\r\n              \"https://twitter.com/intent/tweet?text=\" +\r\n              quote +\r\n              \"%0A\" +\r\n              \"- \" +\r\n              author +\r\n              \".\"\r\n            }\r\n            id='tweet-quote'\r\n            className='twitter-share-button ma2 grow no-underline br-pill ph3 pv2 mb2 dib white bg-black'\r\n            data-size='large'\r\n            data-hashtags='quote'\r\n            hashtags='quote'\r\n            data-show-count='false'\r\n            target='_blank'\r\n            rel='noopener noreferrer'\r\n          >\r\n            Tweet\r\n          </a>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default QuoteBox;\r\n","// @flow\nimport React, { Component } from \"react\";\nimport QuoteBox from \"../src/components/QuoteBox\";\nimport \"tachyons\";\n\nconst errorQuote =\n  \"If you are reading this, your device has probably lost access to the internet. Try refreshing or try again later.\";\nconst errorQuoteAuthor = \"Developer\";\n\ntype AppProps = {\n  quote: string\n};\n\ntype State = {\n  quote: string,\n  author: string\n};\n\nclass App extends Component<AppProps, State> {\n  constructor() {\n    super();\n    this.state = {\n      quote: errorQuote,\n      author: errorQuoteAuthor\n    };\n  }\n\n  componentDidMount() {\n    this.newQuote();\n  }\n\n  newQuote = () => {\n    fetch(\"https://favqs.com/api/qotd\")\n      .then(response => response.json())\n      .then(data => {\n        const { author, body } = data.quote;\n        this.setState({\n          quote: body,\n          author: author\n        });\n      })\n      .catch(err => {\n        this.setState({\n          quote: errorQuote,\n          author: errorQuoteAuthor\n        });\n        console.log(err);\n      });\n    this.changeColor();\n  };\n\n  changeColor = () => {\n    const colors = [\n      \"#213a54\",\n      \"#342224\",\n      \"#472E32\",\n      \"#4f121c\",\n      \"#345920\",\n      \"#125b91\",\n      \"#5f276b\",\n      \"#911f4c\",\n      \"#543902\",\n      \"#543902\",\n      \"#005500\",\n      \"#07005e\",\n      \"#550055\",\n      \"#3b0053\",\n      \"#360036\",\n      \"#3e3e3e\",\n      \"#111111\",\n      \"#554800\",\n      \"#770303\",\n      \"#600000\"\n    ];\n\n    // grab color randomly\n    let oneRandomColor = colors[Math.floor(Math.random() * colors.length)];\n\n    // changing element colors\n    document.getElementsByTagName(\"body\")[0].style.background = oneRandomColor;\n    document.getElementById(\"author\").style.color = oneRandomColor;\n    document.getElementById(\"text\").style.color = oneRandomColor;\n    document.getElementById(\"app-header\").style.color = oneRandomColor;\n  };\n\n  render() {\n    return (\n      <div className='App tc ma0 v-mid'>\n        <div id='divcenter'>\n          <h1\n            id='app-header'\n            style={{\n              display: \"inline\",\n              fontFamily: \"'Bree Serif', sans-serif\",\n              margin: \"1rem\",\n              padding: \"0.5rem 1rem\",\n              borderRadius: \"5px\",\n              background: \"whitesmoke\",\n              textDecoration: \"underline\",\n              transition: \"color 3s\"\n            }}\n          >\n            Random Quotes{\" \"}\n          </h1>{\" \"}\n          <QuoteBox\n            quote={this.state.quote}\n            author={this.state.author}\n            newQuoteBtn={this.newQuote}\n          />{\" \"}\n        </div>{\" \"}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}