{"version":3,"sources":["components/QuoteBox.js","App.js","serviceWorker.js","index.js"],"names":["QuoteBox","_this$props","this","props","quote","author","newQuoteBtn","react_default","a","createElement","className","id","onClick","href","quoteLength","data-size","data-hashtags","hashtags","data-show-count","target","rel","async","src","charSet","style","display","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","newQuote","fetch","then","response","json","data","_data$quote","body","setState","state","switchVariable","components_QuoteBox","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oMA8EeA,yLAvDJ,IAAAC,EACgCC,KAAKC,MAApCC,EADDH,EACCG,MAAOC,EADRJ,EACQI,OAAQC,EADhBL,EACgBK,YACvB,OAEEC,EAAAC,EAAAC,cAAA,OACEC,UAAU,iDACVC,GAAG,cAEHJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAiBC,GAAG,aACjCJ,EAAAC,EAAAC,cAAA,KAAGE,GAAG,QAAQP,GACdG,EAAAC,EAAAC,cAAA,KAAGE,GAAG,UAAUN,GAChBE,EAAAC,EAAAC,cAAA,UAAQE,GAAG,YAAYC,QAASN,GAAhC,aAIAC,EAAAC,EAAAC,cAAA,KAGEI,KACE,yCACAT,EACA,QAEAC,EACA,IAEFO,QAASV,KAAKY,YAEdH,GAAG,cACHD,UAAU,uBACVK,YAAU,QACVC,gBAAc,QACdC,SAAS,QACTC,kBAAgB,QAChBC,OAAO,SACPC,IAAI,uBApBN,SA0BAb,EAAAC,EAAAC,cAAA,UACEY,OAAK,EACLC,IAAI,0CACJC,QAAQ,UAEVhB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAac,MAAO,CAAEC,QAAS,SAA5C,gEAlEaC,cC6DRC,cA3Db,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAA3B,KAAAyB,IACZC,EAAAC,OAAAE,EAAA,EAAAF,CAAA3B,KAAA2B,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAA/B,QAgCFgC,SAAW,WACTC,MAAM,8BACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAQ,IAAAC,EACaD,EAAKnC,MAAtBC,EADImC,EACJnC,OAAQoC,EADJD,EACIC,KAChBb,EAAKc,SAAS,CACZtC,MAAOqC,EACPpC,OAAQA,OAtCduB,EAAKe,MAAQ,CACXC,gBAAgB,EAChBxC,MAAO,GACPC,OAAQ,IALEuB,mFAUZ1B,KAAKgC,4CAoCL,OACE3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACbH,EAAAC,EAAAC,cAAA,kCACAF,EAAAC,EAAAC,cAACoC,EAAD,CACEzC,MAAOF,KAAKyC,MAAMvC,MAClBC,OAAQH,KAAKyC,MAAMtC,OACnBC,YAAaJ,KAAKgC,mBArDVR,aCQEoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,KAAK,SAAAuB,GACjCA,EAAaC","file":"static/js/main.7333eccb.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"tachyons\";\r\n\r\nclass QuoteBox extends Component {\r\n  // quoteLength = () => {\r\n  //   const { quote, author } = this.props;\r\n  //   if (quote.length + author.length >= 25) {\r\n  //     document\r\n  //       .getElementById(\"tweet-quote-main\")\r\n  //       .setAttribute(\r\n  //         \"href\",\r\n  //         `https://twitter.com/intent/tweet?text=${quote}%0A-${author}.`\r\n  //       );\r\n  //   } else {\r\n  //     document\r\n  //       .getElementById(\"tweet-quote-main\")\r\n  //       .setAttribute(\r\n  //         \"href\",\r\n  //         `https://twitter.com/intent/tweet?text=${quote}.`\r\n  //       );\r\n  //   }\r\n  // };\r\n\r\n  render() {\r\n    const { quote, author, newQuoteBtn } = this.props;\r\n    return (\r\n      // <div className=\"flex justify-around h-auto v-mid\" id=\"background\">\r\n      <div\r\n        className=\"mw5 mw7-ns center bg-light-gray pa3 ph5-ns ma0\"\r\n        id=\"background\"\r\n      >\r\n        <div className=\"ma4 pa4 ba bw1\" id=\"quote-box\">\r\n          <p id=\"text\">{quote}</p>\r\n          <p id=\"author\">{author}</p>\r\n          <button id=\"new-quote\" onClick={newQuoteBtn}>\r\n            New Quote\r\n          </button>\r\n          {/* <button onClick={this.quoteLength} id=\"tweet-quote\"> */}\r\n          <a\r\n            // href=\"https://twitter.com/share?ref_src=twsrc%5Etfw\"\r\n\r\n            href={\r\n              \"https://twitter.com/intent/tweet?text=\" +\r\n              quote +\r\n              \"%0A\" +\r\n              \"- \" +\r\n              author +\r\n              \".\"\r\n            }\r\n            onClick={this.quoteLength}\r\n            // href=\"https://twitter.com/intent/tweet\"\r\n            id=\"tweet-quote\"\r\n            className=\"twitter-share-button\"\r\n            data-size=\"large\"\r\n            data-hashtags=\"quote\"\r\n            hashtags=\"quote\"\r\n            data-show-count=\"false\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            Tweet\r\n          </a>\r\n          {/* </button> */}\r\n\r\n          <script\r\n            async\r\n            src=\"https://platform.twitter.com/widgets.js\"\r\n            charSet=\"utf-8\"\r\n          />\r\n          <p className=\"long-tweet\" style={{ display: \"none\" }}>\r\n            This quote is too long to tweet. Try another quote.\r\n          </p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default QuoteBox;\r\n","import React, { Component } from \"react\";\nimport QuoteBox from \"../src/components/QuoteBox\";\nimport \"tachyons\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      switchVariable: false,\n      quote: \"\",\n      author: \"\"\n    };\n  }\n\n  componentDidMount() {\n    this.newQuote();\n    // this.fetchQuote();\n  }\n\n  // fetchQuote = () => {\n  //   // let switchVar = false;\n  //   do {\n  //     fetch(\"https://favqs.com/api/qotd\")\n  //       .then(response => response.json())\n  //       .then(data => {\n  //         const { author, body } = data.quote;\n  //         if (body.length + author.length <= 375) {\n  //           // switchVar = true;\n  //           this.setState({\n  //             switchVariable: true,\n  //             quote: body,\n  //             author: author\n  //           });\n  //         }\n  //       });\n  //   } while (this.state.switchVariable === true);\n  // };\n\n  newQuote = () => {\n    fetch(\"https://favqs.com/api/qotd\")\n      .then(response => response.json())\n      .then(data => {\n        const { author, body } = data.quote;\n        this.setState({\n          quote: body,\n          author: author\n        });\n      });\n  };\n\n  render() {\n    return (\n      <div className=\"App tc ma0 mt6 v-mid\">\n        <h1>Random Quote Machine</h1>\n        <QuoteBox\n          quote={this.state.quote}\n          author={this.state.author}\n          newQuoteBtn={this.newQuote}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}